% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/detectAnomaly.R
\name{detectAnomaly}
\alias{detectAnomaly}
\title{PCA Anomaly Scores via Isolation Forests with Visualization}
\usage{
detectAnomaly(
  reference_data,
  query_data = NULL,
  query_cell_type_col,
  ref_cell_type_col,
  n_components = 10,
  n_tree = 500,
  anomaly_treshold = 0.5,
  ...
)
}
\arguments{
\item{reference_data}{A \code{\linkS4class{SingleCellExperiment}} object containing numeric expression matrix for the reference cells.}

\item{query_data}{An optional \code{\linkS4class{SingleCellExperiment}} object containing numeric expression matrix for the query cells. 
If NULL, then the isolation forest anomaly scores are computed for the reference data. Default is NULL.}

\item{query_cell_type_col}{A character string specifying the column name in the query dataset containing cell type annotations.}

\item{ref_cell_type_col}{A character string specifying the column name in the reference dataset containing cell type annotations.}

\item{n_components}{An integer specifying the number of principal components to use. Default is 10.}

\item{n_tree}{An integer specifying the number of trees for the isolation forest. Default is 500}

\item{anomaly_treshold}{A numeric value specifying the threshold for identifying anomalies, Default is 0.5.}

\item{...}{Additional arguments passed to the `isolation.forest` function.}
}
\value{
A list containing the results for each cell type, including anomaly scores, anomaly IDs and PCA data.
}
\description{
\code{detectAnomaly} performs diagnostics using isolation forest with PCA and visualization. 
It takes reference and query \code{\linkS4class{SingleCellExperiment}} objects, their corresponding labels, and various parameters to perform 
the analysis. The function returns a list containing the results for each cell type, including anomaly scores, anomaly IDs, 
PCA data, and optional PCA anomaly plots.
}
\details{
This function first applies PCA to the entire reference expression data and predicts PCA scores for the query data if it is provided. 
It builds isolation forests and performs diagnostics for each cell type, calculating anomaly scores for the query data (or reference 
data if the query data is not provided).
Isolation Forest is an algorithm for anomaly detection that works by building an ensemble of isolation trees. It is based on the 
idea that anomalies are more susceptible to isolation than normal instances.
The part where we project the query data onto the PCA space of the reference data is done by using the `predict` function on the PCA model with the query expression data. This allows us to transform the query data into the same PCA space as the reference data, which is necessary for the isolation forest analysis.
}
\examples{
\donttest{
# Load required libraries
library(scRNAseq)
library(scuttle)
library(SingleR)
library(scran)
library(scater)

# Load data
sce <- HeOrganAtlasData(tissue = c("Marrow"), ensembl = FALSE)

# Divide the data into reference and query datasets
set.seed(100)
indices <- sample(ncol(assay(sce)), size = floor(0.7 * ncol(assay(sce))), replace = FALSE)
ref_data <- sce[, indices]
query_data <- sce[, -indices]

# log transform datasets
ref_data <- logNormCounts(ref_data)
query_data <- logNormCounts(query_data)

# Get cell type scores using SingleR (or any other cell type annotation method)
scores <- SingleR(query_data, ref_data, labels = ref_data$reclustered.broad)

# Add labels to query object
colData(query_data)$labels <- scores$labels

# Selecting highly variable genes (can be customized by the user)
ref_var <- getTopHVGs(ref_data, n = 2000)
query_var <- getTopHVGs(query_data, n = 2000)

# Intersect the gene symbols to obtain common genes
common_genes <- intersect(ref_var, query_var)
ref_data_subset <- ref_data[common_genes, ]
query_data_subset <- query_data[common_genes, ]

# Run PCA on the reference data
ref_data_subset <- runPCA(ref_data_subset)

# Store PCA anomaly data and plots
anomaly_output <- detectAnomaly(ref_data_subset, query_data_subset,
                                ref_cell_type_col = "reclustered.broad", 
                                query_cell_type_col = "labels",
                                n_components = 10,
                                n_tree = 500,
                                anomaly_treshold = 0.5) 

# Plot the output for a cell type
plot(anomaly_output, cell_type = "CD8", pc_subset = c(1:5))
}

}
\seealso{
\code{\link{plot.detectAnomaly}}
}
\author{
Anthony Christidis, \email{anthony-alexander_christidis@hms.harvard.edu}
}
