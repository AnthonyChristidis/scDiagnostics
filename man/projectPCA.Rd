% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/projectPCA.R
\name{projectPCA}
\alias{projectPCA}
\title{Project Query Data Onto PCA Space of Reference Data}
\usage{
projectPCA(
  query_data,
  reference_data,
  n_components = 10,
  query_cell_type_col = NULL,
  ref_cell_type_col = NULL,
  return_value = c("data.frame", "list")[1]
)
}
\arguments{
\item{query_data}{A \code{\linkS4class{SingleCellExperiment}} object containing numeric expression matrix for the query cells.}

\item{reference_data}{A \code{\linkS4class{SingleCellExperiment}} object containing numeric expression matrix for the reference cells.}

\item{n_components}{An integer specifying the number of principal components to use for projection. Defaults to 10. 
Must be less than or equal to the number of components available in the reference PCA.}

\item{query_cell_type_col}{character. The column name in the \code{colData} of \code{query_data} 
that identifies the cell types.}

\item{ref_cell_type_col}{character. The column name in the \code{colData} of \code{reference_data} 
that identifies the cell types.}

\item{return_value}{A character string specifying the format of the returned data. Can be \code{data.frame} (combined reference 
and query projections) or \code{list} (separate lists for reference and query projections) (default = \code{data.frame}).}
}
\value{
A \code{data.frame} containing the projected data in rows (reference and query data combined) or a \code{list} containing 
separate matrices for reference and query projections, depending on the \code{return_value} argument.
}
\description{
This function projects a query singleCellExperiment object onto the PCA space of a reference 
singleCellExperiment object. The PCA analysis on the reference data is assumed to be pre-computed and stored within the object.
}
\details{
This function assumes that the "PCA" element exists within the \code{reducedDims} of the reference data 
(obtained using \code{reducedDim(reference_data)}) and that the genes used for PCA are present in both the reference and query data. 
It performs centering and scaling of the query data based on the reference data before projection.
}
\examples{
# Load required libraries
library(scRNAseq)
library(scuttle)
library(SingleR)
library(scran)
library(scater)
library(RColorBrewer)

# Load data (replace with your data loading)
sce <- HeOrganAtlasData(tissue = c("Marrow"), ensembl = FALSE)

# Divide the data into reference and query datasets
set.seed(100)
indices <- sample(ncol(assay(sce)), size = floor(0.7 * ncol(assay(sce))), replace = FALSE)
ref_data <- sce[, indices]
query_data <- sce[, -indices]

# log transform datasets
ref_data <- scuttle::logNormCounts(ref_data)
query_data <- scuttle::logNormCounts(query_data)

# Get cell type scores using SingleR (or any other cell type annotation method)
scores <- SingleR::SingleR(query_data, ref_data, labels = ref_data$reclustered.broad)

# Add labels to query object
colData(query_data)$labels <- scores$labels

# Selecting highly variable genes (can be customized by the user)
ref_var <- scran::getTopHVGs(ref_data, n = 2000)
query_var <- scran::getTopHVGs(query_data, n = 2000)

# Intersect the gene symbols to obtain common genes
common_genes <- intersect(ref_var, query_var)
ref_data_subset <- ref_data[common_genes, ]
query_data_subset <- query_data[common_genes, ]

# Run PCA on the reference data (assumed to be prepared)
ref_data_subset <- runPCA(ref_data_subset)

# Project the query data onto PCA space of reference
pca_output <- projectPCA(query_data_subset, ref_data_subset,
                         n_components = 10,
                         query_cell_type_col = "labels",
                         ref_cell_type_col = "reclustered.broad",
                         return_value = c("data.frame", "list")[1])

}
\author{
Anthony Christidis, \email{anthony-alexander_christidis@hms.harvard.edu}
}
